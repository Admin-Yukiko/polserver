const ExtObjSymbol = Symbol("ExtObj");

{{#each .}}class {{$.name}}{{#if parent.[0]}} extends {{parent.[0]}}{{/if}} {
  constructor(extObj) {
      {{#if parent.[0]}}super(extObj);
      {{/if}}Object.defineProperties(this, { {{#unless parent.[0]}}
            [ExtObjSymbol]: { writable: false, enumerable: false, value: extObj },{{/unless}}
{{#each memberProps}}            "{{@key}}": { {{#if ro}}set() {}{{else}}set(v) { this[ExtObjSymbol].set_member({{#exists id}}{{id}}{{else}}"{{@key}}"{{/exists}}, v); }{{/if}}, get() { return this[ExtObjSymbol].get_member({{#exists id}}{{id}}{{else}}"{{@key}}"{{/exists}}); } },
{{/each}}
      });
  }
{{#each prototypes}}  {{camelCase @key}}() { return this[ExtObjSymbol].call_method({{#exists id}}{{id}}{{else}}"{{@key}}"{{/exists}}, ...arguments); }
{{/each}}
};

{{/each}}
  

module.exports = {
{{#each .}}    {{$.name}},
{{/each}} 
};
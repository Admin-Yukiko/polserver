// @ts-check

const { PolObject } = process._linkedBinding("pol");
const { EventEmitter } = require("events");

{{#each .}}class {{$.name}}{{#if parent.[0]}} extends {{parent.[0]}}{{else}} extends PolObject{{/if}} {
 constructor(extObj, { get_member, set_member, call_method }) {
      super(...arguments);
      Object.defineProperties(this, {
{{#each memberProps}}            "{{@key}}": { {{#if ro}}set() {}{{else}}set(v) { set_member(this, {{#exists id}}{{id}}{{else}}"{{@key}}"{{/exists}}, v); }{{/if}}, get() { return get_member(this, {{#exists id}}{{id}}{{else}}"{{@key}}"{{/exists}}); } },
{{/each}}
      });
  {{#each prototypes}}    this.{{camelCase @key}} = function() { return call_method(this, {{#exists id}}{{id}}{{else}}"{{@key}}"{{/exists}}, ...arguments); };
{{/each}}
  }

};

{{/each}}
  
function PromiseEventEmitter() {
  this._events = Object.create(null);
};

function wrapCallback(cb) {
  function wrappedCB() {
    try {
      const retVal = wrappedCB.original.call(undefined, ...arguments);
      if (retVal instanceof Promise) {
        return retVal.catch( (e) => { console.log("wrapped cb exception",e); });
      }
    } catch (e) {
      console.log("wrapped CB exception",e);
    }
  }
  wrappedCB.original = cb;
  return wrappedCB;
}

Object.assign(PromiseEventEmitter.prototype,EventEmitter.prototype);

PromiseEventEmitter.prototype.addListener = function addListener(event, listener)  {
  return EventEmitter.prototype.addListener.call(this, event, wrapCallback(listener));
}

PromiseEventEmitter.prototype.on = PromiseEventEmitter.prototype.addListener;

PromiseEventEmitter.prototype.prependListener = function prependListener(event, listener) {
  return EventEmitter.prototype.prependListener.call(this, event, wrapCallback(listener));
}

PromiseEventEmitter.prototype.removeListener = function removeListener(event, listener) {
  const listeners = (this._events && this._events[event]) || [];
  const original = listeners.find( lstn => lstn === listener || lstn.original === listener) || listener;;
  return EventEmitter.prototype.off.call(this, event, original);
}

PromiseEventEmitter.prototype.off = PromiseEventEmitter.prototype.removeListener;

module.exports = {
{{#each .}}    {{$.name}},
{{/each}}    PromiseEventEmitter
};